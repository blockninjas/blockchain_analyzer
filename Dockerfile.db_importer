# Dockerfile for deploying the db_importer on AWS.
#
# For local testing the following commands can be used:
#
# 1. Build an image via
# $ docker build -t bitcoin/db_importer .
#
# 2. Run the container via
# $ docker run -v ${ABSOLUTE_PATH_TO_BLK_FILES}:/home/blockninjas/blk_files -it --rm --name db_importer bitcoin/db_importer $DB_URL

FROM alpine:latest

# The user ID of the default user on an AWS EC2 instance.
ENV USER_ID 500

# The group ID of the default user on an AWS EC2 instance.
ENV GROUP_ID 500

ENV USER_NAME blockninjas

ENV GROUP_NAME blockninjas

COPY . /analysis_suite

WORKDIR /analysis_suite

# Instruct `cargo install` to install binaries into `${CARGO_INSTALL_ROOT}/bin`.
ENV CARGO_INSTALL_ROOT /usr/local/

# TODO Use a release build for final deployment.
# TODO Use specific rust version.
# We Immediately remove the build-base and cargo packages after usage, to
# minimize image size. The `rust` package must not be removed, since the
# libraries that are part of the package are needed to invoke `diesel` and the
# `db_importer`.
RUN apk add --no-cache build-base postgresql-dev rust cargo && \
    cargo update && \
    cargo install diesel_cli --no-default-features --features postgres && \
    cargo install --path db_importer && \
    apk del build-base cargo

# `groupadd` and `useradd` are not part of the alpine standard installation
# and have to be added via the `shadow` package.
# We immediately remove the package after usage, to minimize image size.
RUN apk add --no-cache shadow && \
    groupadd -g $GROUP_ID $GROUP_NAME && \
    useradd -u $USER_ID -g $GROUP_NAME -s /bin/sh -m $USER_NAME && \
    apk del shadow

# Change to the new user, i.e. all of the following commands will be executed
# as this user.
USER ${USER_ID}:${GROUP_ID}

# The home-directory of the new user.
ENV HOME /home/${USER_NAME}

# From where to read the blk files to import into the database.
ENV BLK_FILE_DIR ${HOME}/blk_files
RUN mkdir $BLK_FILE_DIR
VOLUME $BLK_FILE_DIR

COPY ./docker/db_importer/entrypoint.sh /usr/local/bin/

ENTRYPOINT ["entrypoint.sh"]
